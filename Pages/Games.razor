@page "/games"
@using Microsoft.JSInterop
@using PhantomAirInvite.Shared.Games
@inject IJSRuntime JS
@inject NavigationManager Nav

@code {
  // Non-romantic, Phantom/Chicago flavored
  private static readonly string[] Pool = new[] {
    "🍸 Any alcohol you want!",
    "🧤🧣 Winter Kit (Gloves + Warmers)",
    "✈️💤 Airplane Pillow",
    "🐔🍟 Chick-fil-A Gift Card",
    "💄💳 Ulta Gift Card",
    "🍬🛍️ Bag of Candy",
    "🎭 Phantom Pin / Sticker",
    "🧦 Cozy Socks",
    "🧴🪥 Travel Mini Kit",
    "🍩 Donut"
  };

  string? scratchPrize;
  string? memoryPrize;

  string PickRandom() => Pool[Random.Shared.Next(Pool.Length)];
  string PickDistinct(string other)
  {
    string p;
    do p = PickRandom(); while (p == other);
    return p;
  }

  protected override async Task OnInitializedAsync()
  {
    // try to load persisted prizes
    try
    {
      scratchPrize = await JS.InvokeAsync<string>("storage.get", "phantom_scratch_prize");
      memoryPrize  = await JS.InvokeAsync<string>("storage.get", "phantom_memory_prize");
    }
    catch { /* ok first run */ }

    if (string.IsNullOrWhiteSpace(scratchPrize) || string.IsNullOrWhiteSpace(memoryPrize))
    {
      var first  = scratchPrize ?? PickRandom();
      var second = memoryPrize  ?? PickDistinct(first);

      scratchPrize = first;
      memoryPrize  = second;

      try
      {
        await JS.InvokeVoidAsync("storage.set", "phantom_scratch_prize", scratchPrize);
        await JS.InvokeVoidAsync("storage.set", "phantom_memory_prize",  memoryPrize);
      }
      catch { /* ignore */ }
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (!firstRender) return;

    // Guard: if the intro letter hasn't been opened yet, go back to Home.
    try
    {
      var seen = await JS.InvokeAsync<string>("storage.get", "phantom_intro_dismissed");
      if (string.IsNullOrWhiteSpace(seen))
      {
        // Use a *relative* navigate so it respects <base href="/phantominvitation/">
        Nav.NavigateTo("", forceLoad: false);
        return;
      }
    }
    catch
    {
      // If storage helper isn't available, be safe and route to Home
      Nav.NavigateTo("", forceLoad: false);
      return;
    }
  }
}

<div class="section" style="display:grid;place-items:center;gap:14px">
  <h2>Quick Games</h2>

  <p class="card" style="max-width:720px">
    Earn up to <strong>2 prizes</strong> tonight. One from each game. Please provide screenshot of the prize you won!
  </p>

  <!-- SCRATCH-OFF -->
  <div class="card" style="margin-top:8px; max-width: 360px; width:100%">
    <h3 style="margin-top:0">Scratch-Off: Reveal the Mask</h3>
    <div class="scratch-wrap" style="max-width: 320px; margin-inline:auto;">
      <ScratchOff
        PrizeText="@(scratchPrize ?? "🎟 Mystery Prize")"
        CoverColor="#3a1012"
        Width="280"
        Height="150"
        Threshold="0.55" />
    </div>
    <p style="font-size:.9rem;opacity:.8;margin-top:8px">(Prize limit 1 from this game)</p>
  </div>

  <!-- MEMORY MATCH -->
  <div class="card" style="margin-top:8px; max-width: 360px; width:100%">
    <h3 style="margin-top:0">Memory Match: Light the Candles</h3>
    <div style="max-width: 320px; margin-inline:auto;">
      <MemoryMatch />
    </div>

    <p style="font-size:.9rem;opacity:.8;margin-top:8px">(Prize limit 1 from this game)</p>
  </div>
</div>
